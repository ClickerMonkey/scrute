{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 25ce73e92c04056ff075","webpack:///./src/Constants.ts","webpack:///./src/Node.ts","webpack:///./src/Dependency.ts","webpack:///./src/Watcher.ts","webpack:///./src/Link.ts","webpack:///./src/handler.ts","webpack:///./src/observe.ts","webpack:///./src/Observer.ts","webpack:///./src/watch.ts","webpack:///./src/unobserve.ts","webpack:///./src/computed.ts","webpack:///./src/index.ts"],"names":[],"mappings":"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","file":"scrute.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"scrute\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"scrute\"] = factory();\n\telse\n\t\troot[\"scrute\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 25ce73e92c04056ff075","\n/**\n * The hidden property which stores the reference to the Observer for an object.\n */\nexport const PROPERTY = '$obs';\n\n/**\n * This is a map of array functions which modify the contents of an array. When\n * this happens the observed array is checked for referential and length changes.\n */\nexport const ARRAY_CHANGES = {\n  'pop': 1,\n  'push': 1,\n  'shift': 1,\n  'unshift': 1,\n  'reverse': 1,\n  'splice': 1,\n  'sort': 1,\n};\n\n/**\n * This is a map of array functions which can return different results when the\n * array is modified with the above functions. When these functions are called\n * the watch function observes all items in the array and it's length.\n */\nexport const ARRAY_ITERATIONS = {\n  'concat': 1,\n  'every': 1,\n  'fill': 1,\n  'filter': 1,\n  'find': 1,\n  'findIndex': 1,\n  'forEach': 1,\n  'includes': 1,\n  'indexOf': 1,\n  'join': 1,\n  'lastIndexOf': 1,\n  'map': 1,\n  'reduce': 1,\n  'reduceRight': 1,\n  'slice': 1,\n  'some': 1,\n};\n\n\n// WEBPACK FOOTER //\n// ./src/Constants.ts","\n\n/**\n * A node in a doubly-linked list. The functions in this class are mostly\n * intended for use by the head node. A default head node points to itself and\n * has a null value. A node always has a next or previous node reference.\n */\nexport class Node<T>\n{\n\n  public next: Node<T>;\n  public prev: Node<T>;\n  public value: T;\n\n  /**\n   * Creates a new node given a value.\n   *\n   * @param value The value for the node.\n   */\n  public constructor (value: T)\n  {\n    this.value = value;\n    this.next = this.prev = this;\n  }\n\n  /**\n   * Iterates over the nodes in the linked list and returns the number of nodes\n   * in the list.\n   *\n   * @param iterator The function to call with the value of the node, the\n   *    reference to the node (useful for removing the value from the list),\n   *    and the index of the value in the list starting at the next node.\n   */\n  public forEach (iterator: (value: T, node: Node<T>, index: number) => any): number\n  {\n    let curr: Node<T> = this.next;\n    let index: number = 0;\n\n    while (curr !== this)\n    {\n      const next: Node<T> = curr.next;\n\n      iterator( curr.value, curr, index );\n\n      curr = next;\n      index++;\n    }\n\n    return index;\n  }\n\n  /**\n   * Returns the items in this list as an array.\n   */\n  public toArray (): T[]\n  {\n    let out: T[] = [];\n\n    this.forEach( item => out.push(item) );\n\n    return out;\n  }\n\n  /**\n   * Inserts this Node after the given node.\n   *\n   * @param prev The node to insert this Node after.\n   */\n  public insertAfter (prev: Node<T>): void\n  {\n    this.next = prev.next;\n    this.prev = prev;\n    this.prev.next = this.next.prev = this;\n  }\n\n  /**\n   * If this is the head of a list, this function adds a node to the very end\n   * of the list. This is also equivalent to adding the given node directly\n   * before this node.\n   *\n   * @param last The node to insert at the end of the list / before this node.\n   */\n  public push (last: Node<T>): void\n  {\n    last.insertAfter(this.prev);\n  }\n\n  /**\n   * If this Node is in a list, it removes itself from the list.\n   */\n  public remove (): void\n  {\n    if (!this.isEmpty())\n    {\n      this.next.prev = this.prev;\n      this.prev.next = this.next;\n      this.prev = this.next = this;\n    }\n  }\n\n  /**\n   * Returns whether the list this node is in is empty.\n   */\n  public isEmpty (): boolean\n  {\n    return this.next === this;\n  }\n\n  /**\n   * Returns a new node for the head of the list.\n   */\n  public static head<T>(): Node<T>\n  {\n    return new Node(null);\n  }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/Node.ts","\nimport { Link } from './Link';\nimport { Node } from './Node';\nimport { Observer } from './Observer';\n\n\n\n/**\n * A map of dependencies keyed by the property name.\n */\nexport type DependencyMap = { [prop: string]: Dependency };\n\n\n/**\n * A dependency is a property of an object or an item in an array.\n */\nexport class Dependency\n{\n\n  public links: Node<Link>;\n  public observer: Observer;\n\n  /**\n   * Creates a new Dependency.\n   *\n   * @param observer The observer for the object.\n   */\n  public constructor (observer: Observer)\n  {\n    this.observer = observer;\n    this.links = Node.head();\n  }\n\n  /**\n   * Notifies all observing watchers that this dependency has changed. If any\n   * of the watchers are watching for deep (sub) changes the parent dependency\n   * is notified.\n   *\n   * @param notifyParent If a deep watcher is listening on this dependency,\n   *    should we notify the parent of the observer?\n   * @returns True if a deep watcher was notified.\n   */\n  public notify (notifyParent: boolean = false): boolean\n  {\n    let deep: boolean = false;\n\n    // We need to iterate over a copy, otherwise it could get stuck in an infinite loop.\n    this.links.toArray().forEach(link =>\n    {\n      link.watcher.notify()\n\n      deep = deep || link.watcher.deep;\n    });\n\n    if (notifyParent && deep && this.observer.parent)\n    {\n      this.observer.parent.notify( notifyParent );\n    }\n\n    return deep;\n  }\n\n  /**\n   * Destroys the depdendency removing it from all watchers.\n   */\n  public destroy (): void\n  {\n    this.links.forEach(link => link.remove());\n  }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/Dependency.ts","\nimport { Node } from './Node'\nimport { Link } from './Link'\n\n\n\n/**\n * An array of watcher functions which are currently executing.\n */\nexport const liveWatchers: Watcher[] = [];\n\n/**\n * The loose definition for a watched function. It could return a value, or\n * nothing. Any returned value is stored in the Watcher in the result property.\n */\nexport type WatchExpression = (watcher: Watcher) => any;\n\n\n/**\n * A class which holds a user supplied function and list of observed\n * depdendencies it references. When any of those dependencies change a watcher\n * is notified.\n */\nexport class Watcher\n{\n\n  public expression: WatchExpression;\n  public result: any;\n  public onResult: WatchExpression;\n  public dirty: boolean;\n  public immediate: boolean;\n  public deep: boolean;\n  public links: Node<Link>;\n  public paused: boolean;\n  public evaluating: boolean;\n\n  /**\n   * Creates a new Watcher given an expression, if it's immediate, and if the\n   * watches are deep.\n   */\n  public constructor (expression: WatchExpression, immediate: boolean = true, deep: boolean = false, onResult?: WatchExpression)\n  {\n    this.expression = expression;\n    this.immediate = immediate;\n    this.deep = deep;\n    this.onResult = onResult;\n    this.dirty = false;\n    this.paused = false;\n    this.evaluating = false;\n    this.links = Node.head();\n  }\n\n  /**\n   * Determines whether the watch function is currently observing anything for\n   * changes.\n   */\n  public isWatching (): boolean\n  {\n    return !this.links.isEmpty();\n  }\n\n  /**\n   * Notifies the watcher that a dependency has changed.\n   */\n  public notify (): void\n  {\n    if (this.evaluating)\n    {\n      return;\n    }\n\n    this.dirty = true;\n\n    if (this.immediate)\n    {\n      this.update();\n    }\n  }\n\n  /**\n   * Executes the function and gathers a new list of dependencies.\n   */\n  public update (): void\n  {\n    this.evaluating = true;\n\n    this.off();\n\n    liveWatchers.push(this);\n\n    try\n    {\n      this.result = this.expression(this);\n    }\n    finally\n    {\n      liveWatchers.pop();\n\n      this.dirty = false;\n\n      if (this.onResult)\n      {\n        try\n        {\n          this.onResult(this);\n        }\n        finally\n        {\n          this.evaluating = false;\n        }\n      }\n\n      this.evaluating = false;\n    }\n  }\n\n  /**\n   * Stops watching for changes.\n   */\n  public off (): void\n  {\n    this.links.forEach(link => link.remove());\n  }\n\n  /**\n   * Stops watching for changes and marks the watcher as paused.\n   */\n  public pause (): void\n  {\n    if (!this.paused)\n    {\n      this.off();\n      this.paused = true;\n    }\n  }\n\n  /**\n   * Resumes watching for changes if the watcher was paused.\n   */\n  public resume (): void\n  {\n    if (this.paused)\n    {\n      this.update();\n      this.paused = false;\n    }\n  }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/Watcher.ts","\nimport { Node } from './Node';\nimport { Watcher } from './Watcher';\nimport { Dependency } from './Dependency';\n\n\n\n/**\n * A relationship between a Watcher and Dependency which stores both links so\n * the lists stored in the watcher and dependency can both be removed from\n * instantly.\n */\nexport class Link\n{\n\n  public watcherNode: Node<Link>;\n  public watcher: Watcher;\n\n  public dependencyNode: Node<Link>;\n  public dependency: Dependency;\n\n  /**\n   * Creates a new Link given the Watcher and Dependency.\n   */\n  public constructor (watcher: Watcher, dependency: Dependency)\n  {\n    this.watcher = watcher;\n    this.dependency = dependency;\n    this.watcherNode = new Node( this );\n    this.dependencyNode = new Node( this );\n  }\n\n  /**\n   * Removes the relationship between the Watcher and Dependency.\n   */\n  public remove (): void\n  {\n    this.watcherNode.remove();\n    this.dependencyNode.remove();\n  }\n\n  /**\n   * Creates a link between the given Watcher and Dependency. If a link already\n   * exists, then this function has no effect. If a link does not exist, one is\n   * created and added to both the dependency and watcher lists. A link\n   * reference is always returned.\n   */\n  public static create (watcher: Watcher, dependency: Dependency): Link\n  {\n    let existing: Link = null;\n\n    dependency.links.forEach(link => existing = (link.watcher === watcher ? link : existing));\n\n    if (!existing)\n    {\n      existing = new Link( watcher, dependency );\n\n      dependency.links.push( existing.dependencyNode );\n\n      watcher.links.push( existing.watcherNode );\n    }\n\n    return existing;\n  }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/Link.ts","\nimport { PROPERTY, ARRAY_CHANGES, ARRAY_ITERATIONS } from './Constants';\nimport { Dependency } from './Dependency';\nimport { Observer } from './Observer';\nimport { Link } from './Link';\nimport { liveWatchers } from './Watcher';\nimport { observe, isObservable, isObserved } from './observe';\n\n\n\n/**\n * The handler to pass to the Proxy constructor.\n */\nexport const handler =\n{\n\n  /**\n   * Intercepts the property getting so any watch functions can gather its list\n   * of dependencies.\n   */\n  get (target: any, prop: PropertyKey, _reciever: any)\n  {\n    const val: any = target[ prop ];\n\n    if (prop === PROPERTY)\n    {\n      return val;\n    }\n\n    const obs: Observer = target[ PROPERTY ] as Observer;\n\n    if (typeof val === 'function')\n    {\n      if (target instanceof Array)\n      {\n        if (prop in ARRAY_CHANGES)\n        {\n          return handleArrayChange( target, val, obs );\n        }\n\n        if (prop in ARRAY_ITERATIONS)\n        {\n          return handleArrayIteration( target, val, obs );\n        }\n      }\n\n      return val;\n    }\n\n    return handleWatching( target, prop, val, obs );\n  },\n\n  /**\n   * Intercepts the property setting so all dependent watchers are notified,\n   */\n  set (target: any, prop: PropertyKey, value: any, _reciever: any): boolean\n  {\n    if (value !== target[ prop ])\n    {\n      target[prop] = value;\n\n      const obs: Observer = target[ PROPERTY ] as Observer;\n\n      obs.notify( prop, true );\n    }\n\n    return true;\n  },\n\n  /**\n   * Intercepts the property delete operator so all dependent watchers no longer\n   * listen to changes.\n   */\n  deleteProperty (target: any, prop: PropertyKey): boolean\n  {\n    const obs: Observer = target[ PROPERTY ] as Observer;\n\n    obs.remove( prop );\n\n    return true;\n  }\n\n};\n\n\n/**\n * If a property on an object contains an observable object/array which is not\n * yet being observered - it is replaced with a proxy. The value of the property\n * is returned.\n */\nfunction handleWatching (target: any, prop: PropertyKey, val: any, obs: Observer): any\n{\n  const dep: Dependency = obs.dep( prop );\n\n  liveWatchers.forEach( watcher => Link.create( watcher, dep ) );\n\n  if (isObservable( val ) && !isObserved( val ))\n  {\n    target[ prop ] = val = observe( val, { parent: dep } );\n  }\n\n  return val;\n}\n\n/**\n * Returns a function which ensures when its called that all items and the\n * length of the array is watched by any live watchers.\n */\nfunction handleArrayIteration (target: any[], val: Function, obs: Observer): () => any\n{\n  return function()\n  {\n    const length: number = target.length;\n\n    for (let i = 0; i < length; i++)\n    {\n      handleWatching( target, i, target[ i ], obs );\n    }\n\n    handleWatching( target, 'length', target.length, obs );\n\n    return val.apply( target, arguments );\n  };\n}\n\n/**\n * Returns a function which notifies any watched functions of changes after a\n * mutating array operation is executed.\n */\nfunction handleArrayChange (target: any[], val: Function, obs: Observer): () => any\n{\n  return function ()\n  {\n    const copy = target.slice();\n    const result = val.apply( target, arguments );\n    const max: number = Math.max( copy.length, target.length );\n    let deepNotified: boolean = false;\n\n    for (let i = 0; i < max; i++)\n    {\n      if (copy[i] !== target[i])\n      {\n        deepNotified = deepNotified || obs.notify( i );\n      }\n\n      if (i >= target.length)\n      {\n        obs.remove( i );\n      }\n    }\n\n    if (target.length !== copy.length)\n    {\n      deepNotified = deepNotified || obs.notify( 'length' );\n    }\n\n    if (deepNotified && obs.parent)\n    {\n      obs.parent.notify( true );\n    }\n\n    return result;\n  };\n}\n\n\n// WEBPACK FOOTER //\n// ./src/handler.ts","\nimport { PROPERTY } from './Constants';\nimport { Observer } from './Observer';\nimport { Dependency } from './Dependency';\nimport { handler } from './handler';\n\n\n/**\n * Options that can be passed to the observe function.\n */\nexport interface ObserveOptions\n{\n  parent?: Dependency;\n}\n\n/**\n * Observes the object/array if is not yet observed. An observed object is one\n * that can be used in watch functions and will trigger then when referenced\n * values in the observed object changes.\n *\n * @param input The object/array to observe for changes.\n * @returns The reference to the object/array or the Proxy if it is observable\n *    and has not yet been observed.\n */\nexport function observe <T>(input: T, { parent = null }: ObserveOptions = {}): T\n{\n  if (isObservable(input))\n  {\n    if (!input[PROPERTY])\n    {\n      const proxy = Proxy.revocable( <any>input, handler );\n\n      input = proxy.proxy as T;\n\n      Object.defineProperty( input, PROPERTY, {\n        value: new Observer( proxy.revoke, parent ),\n        writable: false,\n        configurable: true,\n        enumerable: false\n      });\n    }\n  }\n\n  return input;\n}\n\n/**\n * Determines whether the given input can be observed.\n *\n * @param input The input to test.\n */\nexport function isObservable (input: any): boolean\n{\n  return !!(typeof input === 'object' && input !== null);\n}\n\n/**\n * Determines whether the given input is currently being observed.\n *\n * @param input The input to check for observation.\n */\nexport function isObserved (input: any): boolean\n{\n  return !!(typeof input === 'object' && input !== null && input[ PROPERTY ]);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/observe.ts","\nimport { PROPERTY } from './Constants';\nimport { isObserved } from './observe';\nimport { Dependency, DependencyMap } from './Dependency';\n\n\n\ntype Key = string | number;\n\n\n/**\n * An observer is for an object/array and keeps track of all watched properties.\n * If the observer belongs to a sub-object on an observed object then it has a\n * parent. This parent reference is needed for deeply watched objects.\n */\nexport class Observer\n{\n\n  public parent: Dependency | null;\n  public deps: DependencyMap;\n  public revoke: () => any;\n\n  /**\n   * Creates a new Observer.\n   *\n   * @param parent An optional parent dependency.\n   */\n  public constructor (revoke: () => any, parent: Dependency | null = null)\n  {\n    this.revoke = revoke;\n    this.parent = parent;\n    this.deps = Object.create(null);\n  }\n\n  /**\n   * Returns a Dependency for the given property and creates it if it doesn't\n   * exist already.\n   *\n   * @param prop The name of the property or the index of the array element.\n   */\n  public dep (prop: PropertyKey): Dependency\n  {\n    let dep: Dependency = this.deps[ prop as Key ];\n\n    if (!dep)\n    {\n      this.deps[ prop as Key ] = dep = new Dependency( this );\n    }\n\n    return dep;\n  }\n\n  /**\n   * If the given property or array element is being watched, all watchers will\n   * be notified.\n   *\n   * @param prop The name of the property or the index of the array element to\n   *    notify of changes.\n   * @param notifyParent If a deep watcher is listening on this dependency,\n   *    should we notify the parent of the observer?\n   * @returns True if a deep watcher was notified.\n   */\n  public notify (prop: PropertyKey, notifyParent: boolean = false): boolean\n  {\n    const deps: DependencyMap = this.deps;\n\n    if (prop in deps)\n    {\n      return deps[ prop as Key ].notify( notifyParent );\n    }\n    else if (notifyParent && this.parent)\n    {\n      this.parent.notify( notifyParent );\n    }\n\n    return false;\n  }\n\n  /**\n   * Removes the given property or array element so it's no longer observed for\n   * changes.\n   *\n   * @param prop The name of the property or the index of the array element to\n   *    cease watching on.\n   */\n  public remove (prop: PropertyKey): void\n  {\n    const deps: DependencyMap = this.deps;\n\n    if (prop in deps)\n    {\n      deps[ prop as Key ].destroy();\n\n      delete deps[ prop as Key ];\n    }\n  }\n\n  /**\n   * Destroys this observer by destroying all dependents.\n   *\n   * @param target The object which holds this observer.\n   * @param deep If any descendant objects should be destroyed as well.\n   * @param revoke If the proxy should be revoked, making the object unusable.\n   */\n  public destroy (target: any, deep: boolean = false, revoke: boolean = true): void\n  {\n    const deps: DependencyMap = this.deps;\n\n    for (let prop in deps)\n    {\n      deps[ prop ].destroy();\n\n      delete deps[ prop ];\n\n      if (deep)\n      {\n        const value: any = target[ prop ];\n\n        if (isObserved( value ))\n        {\n          const obs = value[ PROPERTY ] as Observer;\n\n          obs.destroy( value, deep, revoke );\n        }\n      }\n    }\n\n    if (revoke)\n    {\n      this.revoke();\n    }\n  }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/Observer.ts","\nimport { Watcher, WatchExpression } from './Watcher'\n\n\n\n/**\n * Options which can be passed to the watch function.\n */\nexport interface WatchOptions\n{\n  /**\n   * If the function should executed as soon as a dependent value changes\n   * (true), or simply mark the returned Watcher instance as dirty (false).\n   */\n  immediate?: boolean;\n\n  /**\n   * If true, not only does the function execute when referenced values change,\n   * but also nested values.\n   */\n  deep?: boolean;\n\n  /**\n   * A callback to invoke when the watched values change.\n   */\n  onResult?: WatchExpression;\n}\n\n\n/**\n * Given a function to execute, any observed objects/arrays which are referenced\n * in that function are tracked. If they change the given function will execute\n * again and a new list of dependencies is generated. A Watcher instance is\n * returned which can be used to pause, resume, or stop watching for changes.\n *\n * @param expr The function to execute when any referenced observed values change.\n * @param immediate If the function should executed as soon as a dependent value\n *    changes (true), or simply mark the returned Watcher instance as dirty (false).\n * @param deep If true, not only does the function execute when referenced\n *    values change, but also nested values.\n * @returns A new instance of Watcher.\n */\nexport function watch (expr: WatchExpression, { immediate = true, deep = false, onResult }: WatchOptions = {}): Watcher\n{\n  const watcher = new Watcher( expr, immediate, deep, onResult );\n\n  watcher.update();\n\n  return watcher;\n}\n\n\n// WEBPACK FOOTER //\n// ./src/watch.ts","\nimport { PROPERTY } from './Constants';\nimport { Observer } from './Observer';\nimport { isObserved } from './observe';\n\n\n\n/**\n * Stops all observations for the given variable. Optionally it can travel\n * through all descendant observers and unobserve them as well.\n *\n * @param input The possibly observed object.\n * @param deep If all descendant observers should be unobserved.\n * @param destroy If the proxy should be destroyed, making it unusable.\n * @returns The reference to the value passed to this function.\n */\nexport function unobserve <T>(input: T, deep: boolean = false, destroy: boolean = true): T\n{\n  if (isObserved( input ))\n  {\n    const obs: Observer = input[ PROPERTY ] as Observer;\n\n    delete input[ PROPERTY ];\n\n    obs.destroy( input, deep, destroy );\n  }\n\n  return input;\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/unobserve.ts","\nimport { Watcher, WatchExpression } from './Watcher';\nimport { watch } from './watch';\n\n\n\n/**\n * Adds or overrides the given property on the given object so when the property\n * is read a watched expression is ran whch generates and returns a value. If\n * no dependent variables have changed, then a cached is returned.\n *\n * @param target The object to add a proeprty to.\n * @param prop The name of the property to add.\n * @param expr The watched function which should return a value.\n * @returns A new instance of Watcher.\n */\nexport function computed (target: any, prop: PropertyKey, expr: WatchExpression): Watcher\n{\n  const watcher: Watcher = watch( expr, { immediate: false, deep: false } );\n\n  watcher.dirty = true;\n\n  Object.defineProperty( target, prop, {\n    configurable: false,\n    enumerable: true,\n    get () {\n      if (watcher.dirty) {\n        watcher.update();\n      }\n      return watcher.result;\n    }\n  });\n\n  return watcher;\n}\n\n\n// WEBPACK FOOTER //\n// ./src/computed.ts","\nimport { PROPERTY, ARRAY_CHANGES, ARRAY_ITERATIONS } from './Constants';\n\nimport { Dependency, DependencyMap } from './Dependency';\nimport { Watcher, WatchExpression } from './Watcher';\nimport { Observer } from './Observer';\nimport { Node } from './Node';\nimport { Link } from './Link';\n\nimport { handler } from './handler';\nimport { watch, WatchOptions } from './watch';\nimport { observe, isObservable, isObserved, ObserveOptions } from './observe';\nimport { unobserve } from './unobserve';\nimport { computed } from './computed';\n\n\n\nexport {\n  PROPERTY, ARRAY_CHANGES, ARRAY_ITERATIONS,\n  Dependency, DependencyMap,\n  Watcher, WatchExpression,\n  Observer,\n  Node,\n  Link,\n  handler,\n  watch, WatchOptions,\n  observe, isObservable, isObserved, ObserveOptions,\n  unobserve,\n  computed\n};\n\n\n// WEBPACK FOOTER //\n// ./src/index.ts"],"sourceRoot":""}